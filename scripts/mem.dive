
< gets the length of an array allocated with `alloc` >
array_cap :: (array: ptr; typesize: s64 -- length: s64) {
	array = sub array, 8;
	length = read array;
	length = div length, typesize;
}

< This memory maps the appropriately sized region >
alloc :: (size: s64 -- memp: ptr; errno: s32) {
	usize: u64;
	usize = cast size;
	usize = add usize, 8;
	< I must add rounding up to page size here >
	
	prots, flags: s32, s32;
	prots = or map_prot_WRITE map_prot_READ;
	flags = or map_flag_ANONYMOUS map_flag_PRIVATE;

	memp, errno = call mmap 0, usize, prots, flags, map_no_file, 0;
	< The size of the region is secretly saved right in front of the region given to the user >
	if errno, exit;
	usize = sub usize, 8;
	write memp, usize;
	memp = add memp, 8;
	exit :: {return;}
}

< Frees a thing allocated with `alloc` >
free :: (memp: ptr -- zeroed_ptr: ptr) {
	errno: s32;
	ifn memp, exit;

	base_memp, usize: ptr, u64;
	base_memp = sub memp, 8;
	usize = read base_memp;
	usize = add usize, 8;
	errno = call munmap base_memp, usize;

	exit :: {return;}
}

map_no_file   :: -1;

map_prot_READ      :: 1;
map_prot_WRITE     :: 2;
map_prot_EXEC      :: 4;
map_prot_SEM       :: 8;

map_flag_SHARED          :: 1;
map_flag_PRIVATE         :: 2;
map_flag_SHARED_VALIDATE :: 4;
map_flag_FIXED           :: 16;
map_flag_ANONYMOUS       :: 32;

mmap :: (address: ptr; size: u64; protection_flags: s32; flags: s32; file_descriptor: s32; offset: s32 -- mapped_address: ptr; errno: s32) {
	SYS_mmap :: 9;
	is_ok: u8;

	mapped_address = syscall SYS_mmap address, size, protection_flags, flags, file_descriptor, offset;
	errno = trans mapped_address;
	is_ok = grows -1, errno;
	if is_ok, exit_norminally;

	exit_with_error :: {
		mapped_address = 0;
		errno = mul -1, errno;
		return;
	}

	exit_norminally :: {
		errno = 0;
		return;
	}
}

munmap :: (address: ptr; size: u64 -- errno: s32) {
	SYS_munmap :: 11;
	errno = syscall SYS_munmap address, size;
	errno = mul -1, errno;
}

mprotect :: (address: ptr; size: u64; protection_flags: s32 -- errno: s32) {
	SYS_mprotect :: 10;
	errno = syscall SYS_mprotect address, size, protection_flags;
	errno = mul -1, errno;
}
